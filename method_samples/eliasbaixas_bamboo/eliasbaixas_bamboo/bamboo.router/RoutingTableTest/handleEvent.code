public void handleEvent(QueueElementIF item){
  if (logger.isDebugEnabled())   logger.debug("got " + item);
  if (item instanceof StagesInitializedSignal) {
    dispatch(new BambooRouterAppRegReq(app_id,true,true,false,my_sink));
    network=Network.instance();
  }
 else   if (item instanceof BambooRouterAppRegResp) {
    if (logger.isDebugEnabled())     logger.debug(" got BambooRouterAppRegResp");
    BambooRouterAppRegResp resp=(BambooRouterAppRegResp)item;
    MODULUS=resp.modulus;
    GUID_DIGITS=resp.guid_digits;
    DIGIT_VALUES=resp.digit_values;
    do_find_owner();
  }
 else   if (item instanceof BambooLeafSetChanged) {
    BambooLeafSetChanged event=(BambooLeafSetChanged)item;
    for (int i=0; i < event.preds.length; ++i) {
      NeighborInfo ni=new NeighborInfo(event.preds[i].node_id,event.preds[i].guid);
      leaf_set.add(ni);
    }
    for (int i=0; i < event.succs.length; ++i) {
      NeighborInfo ni=new NeighborInfo(event.succs[i].node_id,event.succs[i].guid);
      leaf_set.add(ni);
    }
  }
 else   if (item instanceof BambooRouteDeliver) {
    BambooRouteDeliver deliver=(BambooRouteDeliver)item;
    RoutingTableTest other=(RoutingTableTest)guid_to_stage.get(deliver.src);
    long actual=now_ms() - other.last_find_owner;
    long optimal=network.route_time_ms(my_ni.node_id,other.my_ni.node_id,117);
    if (optimal > actual)     optimal=actual;
    System.out.println("STRETCH " + now_ms() + " "+ actual+ " "+ optimal);
    other.do_find_owner();
  }
 else   if (item instanceof BambooRoutingTableChanged) {
    BambooRoutingTableChanged event=(BambooRoutingTableChanged)item;
    if (event.added != null) {
      for (int i=0; i < event.added.length; ++i) {
        NeighborInfo ni=new NeighborInfo(event.added[i].node_id,event.added[i].guid);
        if (logger.isDebugEnabled())         logger.debug("added " + ni + " to rt_set");
        rt_set.add(ni);
      }
    }
    if (event.removed != null) {
      for (int i=0; i < event.removed.length; ++i) {
        NeighborInfo ni=new NeighborInfo(event.removed[i].node_id,event.removed[i].guid);
        if (logger.isDebugEnabled())         logger.debug("removed " + ni + " from rt_set");
        rt_set.remove(ni);
      }
    }
  }
 else   if (item instanceof Alarm) {
    PrintStream output=null;
    try {
      output=new PrintStream(new BufferedOutputStream(new FileOutputStream(output_prefix + "." + check_number++,true)));
    }
 catch (    IOException e) {
      BUG("caught " + e);
    }
    int good_cnt=0;
    if (my_ni == null) {
      logger.fatal("no guid, rt_set.size=" + rt_set.size());
      System.exit(1);
    }
    RoutingTable my_rt=new RoutingTable(my_ni,1.0,MODULUS,GUID_DIGITS,DIGIT_VALUES);
    Iterator i=rt_set.iterator();
    while (i.hasNext()) {
      NeighborInfo ni=(NeighborInfo)i.next();
      if (ni.equals(my_ni))       continue;
      long rtt_ms=network.route_time_ms(my_ni.node_id,ni.node_id,0);
      if (my_rt.add(ni,(double)rtt_ms,true,now_ms()) == null) {
      }
    }
    RoutingTable best=new RoutingTable(my_ni,1.0,MODULUS,GUID_DIGITS,DIGIT_VALUES);
    i=all_nodes.iterator();
    while (i.hasNext()) {
      NeighborInfo ni=(NeighborInfo)i.next();
      long rtt_ms=network.route_time_ms(my_ni.node_id,ni.node_id,0);
      best.add(ni,(double)rtt_ms,true,now_ms());
      if (logger.isDebugEnabled())       logger.debug("adding " + ni + " to best with "+ rtt_ms+ " latency");
    }
    for (int d=0; d < GUID_DIGITS; ++d) {
      for (int v=0; v < DIGIT_VALUES; ++v) {
        RoutingTable.RoutingEntry my_re=my_rt.primary_re(d,v);
        if ((my_re != null) && my_re.ni.node_id.equals(my_ni.node_id))         continue;
        RoutingTable.RoutingEntry best_re=best.primary_re(d,v);
        if (best_re != null) {
          if (my_re == null) {
            if (leaf_set.contains(best_re.ni)) {
              output.println("RT Test | level " + d + " good: "+ my_ni+ " knows about "+ best_re.ni+ " at "+ best_re.rtt_ms+ " (in leaf set only)");
            }
 else {
              output.println("RT Test | level " + d + " hole: "+ my_ni+ " should know about "+ best_re.ni);
              output.println("RT Test | " + best_re.ni + " not in leaf set=");
              Iterator j=leaf_set.iterator();
              while (j.hasNext()) {
                output.println("RT Test | " + j.next());
              }
            }
          }
 else           if ((!best_re.ni.equals(my_re.ni)) && (best_re.rtt_ms < my_re.rtt_ms)) {
            output.println("RT Test | level " + d + " inefficient: "+ my_ni+ " should know about "+ best_re.ni+ " at "+ best_re.rtt_ms+ " instead of "+ my_re.ni+ " at "+ my_re.rtt_ms);
          }
 else {
            if (best_re.rtt_ms > my_re.rtt_ms) {
              logger.fatal("Bug: best=" + best_re + " mine="+ my_re);
              System.exit(1);
            }
            output.println("RT Test | level " + d + " good: "+ my_ni+ " knows about "+ my_re.ni+ " at "+ my_re.rtt_ms);
          }
        }
      }
    }
    output.close();
    classifier.dispatch_later(new Alarm(),check_period);
  }
 else {
    BUG(item.toString());
  }
}
