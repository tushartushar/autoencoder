void storage_changed(boolean added,InetAddress client_id,long size);
protected void storage_changed(final boolean added,final Key fk,final int size,DbTxn xact){
  assert xact != null;
  Dbt key=new Dbt(fk.client_id.getAddress(),0,4);
  Dbt old=new Dbt();
  int retval=0;
  try {
    retval=client_counts.get(xact,key,old,0);
  }
 catch (  DbException e) {
    BUG(e);
  }
  long old_usage=0;
  if (retval != Db.DB_NOTFOUND) {
    ByteBuffer bb=ByteBuffer.wrap(old.getData(),old.getOffset(),old.getSize());
    old_usage=bb.getLong();
  }
  long new_usage=old_usage;
  if (added)   new_usage+=size + Key.SIZE;
 else   new_usage-=size + Key.SIZE;
  byte[] new_bytes=new byte[8];
  ByteBuffer bb=ByteBuffer.wrap(new_bytes);
  bb.putLong(new_usage);
  if (logger.isInfoEnabled()) {
    StringBuffer buf=new StringBuffer(256);
    buf.append("client ");
    buf.append(fk.client_id.getHostAddress());
    buf.append(", ");
    buf.append((added ? "+" : "-"));
    buf.append(size + Key.SIZE);
    buf.append(" bytes, old=");
    byte_cnt_to_sbuf(old_usage,buf);
    buf.append(", new=");
    byte_cnt_to_sbuf(new_usage,buf);
    logger.info(buf);
  }
  Dbt newval=new Dbt(new_bytes);
  try {
    retval=client_counts.put(xact,key,newval,0);
  }
 catch (  DbException e) {
    BUG(e);
  }
  Iterator si=storage_monitors.iterator();
  while (si.hasNext()) {
    notify_storage_changed((StorageMonitor)si.next(),added,fk.client_id,size + Key.SIZE);
  }
}
