@SuppressWarnings("rawtypes") public List mappingXMLToPojo(InputStream xmlData){
  AuditMaster aMaster=new AuditMaster();
  AuditDetail aDetail=new AuditDetail();
  List<Object> auditComplete=new ArrayList<Object>();
  try {
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    factory.setNamespaceAware(true);
    DocumentBuilder builder;
    Document doc=null;
    builder=factory.newDocumentBuilder();
    doc=builder.parse(xmlData);
    ApplLogger.getLogger().info("Parsing the formatted XML and map with POJOs....");
    XPathExpression xPathExpression=XPathFactory.newInstance().newXPath().compile("//XML");
    NodeList nodes=(NodeList)xPathExpression.evaluate(doc,XPathConstants.NODESET);
    NodeList nodes1=(NodeList)nodes;
    for (int i=0; i < nodes1.getLength(); ++i) {
      final NodeList childList=((Element)nodes1.item(i)).getChildNodes();
      for (int j=0; j < childList.getLength(); ++j) {
        final Node node=childList.item(j);
        if (node.getNodeType() == Node.ELEMENT_NODE) {
          String nodename=node.getNodeName();
          Object nodevalue=node.getTextContent();
          targetAuditMasterMapper(nodename,aMaster,nodevalue);
          targetAuditDetailMapper(nodename,aDetail,nodevalue);
        }
      }
    }
  }
 catch (  Exception e) {
    ApplLogger.getLogger().error("Error while mapping the xml data : ",e);
  }
  auditComplete.add(aMaster);
  auditComplete.add(aDetail);
  ApplLogger.getLogger().info("Successfully mapped xml to pojo and returning the list of size : " + auditComplete.size());
  return auditComplete;
}
