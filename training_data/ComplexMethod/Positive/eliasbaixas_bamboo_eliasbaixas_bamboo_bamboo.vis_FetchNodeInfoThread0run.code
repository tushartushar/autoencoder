public void run(){
  if (work_queue.size() == 0) {
    for (int x=0; x < GATEWAY_NODES_IP.length; x++) {
      add_work(GATEWAY_NODES_IP[x],null);
    }
  }
  acore.register_timer(0,check_all_nodes_cb);
  Thread t=new Thread("AsyncCore Thread"){
    public void run(){
      acore.async_main();
    }
  }
;
  t.start();
}
public void run(){
  acore.async_main();
}
public void run(){
  assert ninfo.id != null;
  BambooNode node=nodes_by_id.get(ninfo.id);
  if (node == null) {
    node=stub_vis.return_new_node(ninfo.id,ninfo.addr,ninfo.coordinates);
    nodes_by_id.put(ninfo.id,node);
  }
  node.set_coordinates(ninfo.coordinates);
  node.last_check_ms=System.currentTimeMillis();
  node.uptime_number=ninfo.uptime_number;
  node.uptime_string=ninfo.uptime_string;
  node.current_storage=ninfo.currentStorage;
  node.ID=ninfo.ID;
  node.IP=ninfo.IP;
  node.build=ninfo.build;
  node.estimate=ninfo.estimate;
  node.port=ninfo.port;
  node.hostname=ninfo.hostname;
  node.ninfo=ninfo;
  node.FNIT=FNIT;
  ExtendedNeighborInfo ni=new ExtendedNeighborInfo(ninfo.addr,ninfo.id);
  node.leaf_set=new LeafSet(ni,Math.max(ninfo.preds.size(),ninfo.succs.size()),MODULUS);
  node.ls_lat=new HashMap<ExtendedNeighborInfo,Long>();
  Iterator i=ninfo.preds.iterator();
  while (i.hasNext()) {
    ExtendedNeighborInfo n=(ExtendedNeighborInfo)i.next();
    node.leaf_set.add_node(n);
    node.ls_lat.put(n,new Long(n.rtt_ms));
    String nurl=nid2url(n.node_id);
    if ((!nodes_by_id.containsKey(n.guid)) && (!outstanding(nurl))) {
      add_work(nurl,n.guid);
    }
  }
  i=ninfo.succs.iterator();
  while (i.hasNext()) {
    ExtendedNeighborInfo n=(ExtendedNeighborInfo)i.next();
    node.leaf_set.add_node(n);
    node.ls_lat.put(n,new Long(n.rtt_ms));
    String nurl=nid2url(n.node_id);
    if ((!nodes_by_id.containsKey(n.guid)) && (!outstanding(nurl))) {
      add_work(nurl,n.guid);
    }
  }
  i=ninfo.rt.iterator();
  node.routing_table=new RoutingTable(ni,1.0,MODULUS,160,2);
  int j=0;
  while (i.hasNext()) {
    ExtendedNeighborInfo n=(ExtendedNeighborInfo)i.next();
    node.routing_table.force_add(new ExtendedNeighborInfo(n.node_id,n.guid),n.rtt_ms);
    String nurl=nid2url(n.node_id);
    if ((!nodes_by_id.containsKey(n.guid)) && (!outstanding(nurl))) {
      add_work(nurl,n.guid);
    }
  }
  if (fetch_succeed != null) {
    acore.register_timer(0,curry(fetch_succeed,node));
  }
}
public void run(){
  BambooNode node=nodes_by_id.get(ninfo.id);
  if (node != null) {
    nodes_by_id.remove(ninfo.id);
  }
  if (fetch_fail != null) {
    acore.register_timer(0,curry(fetch_fail,node));
  }
}
public void run(){
  java.awt.EventQueue.invokeLater(new Runnable(){
    public void run(){
      long now_ms=System.currentTimeMillis();
      for (      BigInteger id : nodes_by_id.keySet()) {
        BambooNode node=nodes_by_id.get(id);
        String nurl=nid2url(node.node_id);
        if ((!outstanding(nurl)) && (now_ms - node.last_check_ms > check_period_ms)) {
          add_work(nurl,id);
        }
      }
    }
  }
);
  acore.register_timer(10 * 1000,check_all_nodes_cb);
}
public void run(){
  long now_ms=System.currentTimeMillis();
  for (  BigInteger id : nodes_by_id.keySet()) {
    BambooNode node=nodes_by_id.get(id);
    String nurl=nid2url(node.node_id);
    if ((!outstanding(nurl)) && (now_ms - node.last_check_ms > check_period_ms)) {
      add_work(nurl,id);
    }
  }
}
public void run(NodeInfo ninfo){
  SocketChannel channel=null;
  try {
    InetSocketAddress addr=url2addr(ninfo.url);
    if (addr == null) {
      fetch_failed(ninfo);
      return;
    }
    channel=SocketChannel.open();
    channel.configureBlocking(false);
    channel.connect(addr);
    acore.register_selectable(channel,SelectionKey.OP_CONNECT,curry(connect_cb,ninfo,channel));
  }
 catch (  IOException e) {
    assert false : e;
  }
}
public void run(NodeInfo ninfo,SocketChannel channel){
  try {
    if (channel.finishConnect()) {
      acore.unregister_selectable(channel,OP_CONNECT);
      acore.register_selectable(channel,OP_WRITE,curry(write_cb,ninfo,channel));
    }
  }
 catch (  IOException e) {
    acore.unregister_selectable(channel);
    try {
      channel.close();
    }
 catch (    IOException ignore) {
    }
    fetch_failed(ninfo);
  }
}
public void run(NodeInfo ninfo,SocketChannel channel){
  String getstr="GET / HTTP/1.0\r\n\r\n";
  ByteBuffer pkt=ByteBuffer.wrap(getstr.getBytes());
  try {
    channel.write(pkt);
    if (pkt.position() == pkt.limit()) {
      ByteBuffer resp=ByteBuffer.allocate(32 * 1024);
      acore.unregister_selectable(channel,OP_WRITE);
      acore.register_selectable(channel,OP_READ,curry(read_cb,ninfo,channel,resp));
    }
  }
 catch (  IOException e) {
    acore.unregister_selectable(channel);
    try {
      channel.close();
    }
 catch (    IOException ignore) {
    }
    fetch_failed(ninfo);
    return;
  }
}
public void run(NodeInfo ninfo,SocketChannel channel,ByteBuffer read_buf){
  while (true) {
    int n=0;
    try {
      n=channel.read(read_buf);
    }
 catch (    IOException e) {
      acore.unregister_selectable(channel);
      try {
        channel.close();
      }
 catch (      IOException ignore) {
      }
      fetch_failed(ninfo);
      return;
    }
    if (n == 0)     return;
    if (n < 0)     break;
  }
  acore.unregister_selectable(channel);
  try {
    channel.close();
  }
 catch (  IOException e) {
  }
  NodeInfo new_ninfo=null;
  ByteArrayInputStream is=new ByteArrayInputStream(read_buf.array(),read_buf.arrayOffset(),read_buf.position());
  try {
    new_ninfo=parse_body(is);
  }
 catch (  IOException e) {
    assert false : e;
  }
  if (new_ninfo == null) {
    logger.warn("could not parse body from " + ninfo);
    fetch_failed(ninfo);
    return;
  }
  assert new_ninfo.id != null : new String(read_buf.array(),read_buf.arrayOffset(),read_buf.position());
  new_ninfo.url=ninfo.url;
  fetch_succeeded(new_ninfo);
}
public void run(BambooNode node){
  count++;
  System.out.println(count + ":\t" + node.IP+ ":"+ node.port+ "\t"+ node.hostname);
}
