protected void handle_ae_tree_ready_resp(MerkleTree tree,FetchMerkleTreeNodeResp resp){
  if (ae_state == null) {
    if (logger.isDebugEnabled())     logger.debug("ae_state == null, must have timed out");
    return;
  }
  ae_state.last_activity_ms=timer_ms();
  MerkleTree.Node node=tree.node(ae_state.current_level,ae_state.current_low_time);
  if (node == null) {
    if (logger.isDebugEnabled())     logger.debug(ae_state + " tree has changed");
    goto_next_node();
    return;
  }
  if (Arrays.equals(resp.hash,node.hash())) {
    if (logger.isDebugEnabled())     logger.debug(ae_state + " match");
    goto_next_node();
    return;
  }
  if (logger.isDebugEnabled())   logger.debug(ae_state + " mismatch");
  if ((resp.children == null) || node.children_are_leaves()) {
    ae_state.fetch_keys_seq=next_fetch_keys_seq++;
    FetchKeysReq req=new FetchKeysReq(ae_state.ni.node_id,ae_state.low_guid,ae_state.high_guid,node.range_low(),node.range_high(),ae_state.fetch_keys_seq);
    dispatch(req);
  }
 else {
    Iterator i=resp.children.iterator();
    MerkleTree.Node.Iter j=node.children();
    while (i.hasNext()) {
      if (!j.hasNext()) {
        if (logger.isDebugEnabled())         logger.debug(ae_state + " mismatch in number of children");
        goto_next_node();
        return;
      }
      byte[] other_hash=(byte[])i.next();
      MerkleTree.Node child=j.next();
      if (Arrays.equals(other_hash,child.hash())) {
        if (logger.isDebugEnabled())         logger.debug(ae_state + " match on " + child);
      }
 else {
        if (logger.isDebugEnabled())         logger.debug(ae_state + " mismatch on " + child);
        ae_state.nodes_to_do.addLast(new Pair(new Integer(child.level()),new Long(child.range_low())));
      }
    }
    goto_next_node();
  }
}
