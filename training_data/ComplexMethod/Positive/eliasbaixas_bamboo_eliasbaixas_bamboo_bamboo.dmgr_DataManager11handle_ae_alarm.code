protected void handle_ae_alarm(AntiEntropyAlarm alarm){
  if (ae_state != null) {
    if (ae_state.last_activity_ms + 30000 < timer_ms()) {
      logger.warn("anti-entropy with " + ae_state.ni.node_id + " timed out");
      unsynced(ae_state.guid_range,ae_state.ni.node_id);
      ae_state=null;
    }
  }
  if (ae_state == null) {
    BambooNeighborInfo ni=random_ls_member();
    if (ni == null) {
      if (logger.isDebugEnabled())       logger.debug("no neighbors");
      classifier.dispatch_later(alarm,ae_period + rand.nextInt(ae_period));
      return;
    }
    ae_state=new AntiEntropyState();
    ae_state.ni=ni;
    ae_state.last_activity_ms=timer_ms();
    choose_db(ni);
    TreeState ts=tree_state(ae_state.low_guid,ae_state.high_guid);
    ae_state.current_level=ts.tree.root().level();
    ae_state.current_low_time=ts.tree.root().range_low();
    if (ts.tree.root().valid(now_ms())) {
      if (logger.isDebugEnabled())       logger.debug(ae_state + " tree is ready");
      handle_ae_tree_ready(ts.tree);
    }
 else {
      if (logger.isDebugEnabled())       logger.debug(ae_state + " getting tree ready");
      ts.wait_for_ready(new TreeReadyCB(){
        public void tree_ready(        MerkleTree tree){
          handle_ae_tree_ready(tree);
        }
      }
);
    }
  }
  classifier.dispatch_later(new AntiEntropyAlarm(),ae_period + rand.nextInt(ae_period));
}
