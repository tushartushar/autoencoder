public void process_pending_puts(LinkedList puts){
  if (!puts.isEmpty()) {
    Iterator i=puts.iterator();
    HashSet put_clients=new HashSet();
    while (i.hasNext()) {
      PutInfo pi=(PutInfo)i.next();
      Integer client=new Integer(pi.client);
      put_clients.add(client);
    }
    PriorityQueue pq=new PriorityQueue(put_clients.size());
    long t=0;
    i=put_clients.iterator();
    while (i.hasNext()) {
      Integer client=(Integer)i.next();
      Long count=(Long)commitments.get(client);
      long c=(count == null) ? 0 : count.longValue();
      t+=c;
      pq.add(client,c);
    }
    int n=pq.size();
    HashSet below=new HashSet();
    while (true) {
      double nth=((double)t) / n;
      while ((!pq.isEmpty()) && (pq.getFirstPriority() <= nth)) {
        Integer client=(Integer)pq.getFirst();
        t-=pq.getFirstPriority();
        n-=1;
        assert t >= 0;
        assert n >= 0;
        pq.removeFirst();
        if (put_clients.contains(client))         below.add(client);
      }
      if (!below.isEmpty())       break;
    }
    int which=rand.nextInt(below.size());
    Integer accepted_client=null;
    i=below.iterator();
    while (which-- >= 0)     accepted_client=(Integer)i.next();
    PutInfo accepted=null;
    i=puts.iterator();
    while (i.hasNext()) {
      PutInfo pi=(PutInfo)i.next();
      if ((accepted == null) && (pi.client == accepted_client.intValue())) {
        accepted=pi;
        pi.cb.cb(true,false);
      }
 else       pi.cb.cb(false,false);
    }
    accept_put(accepted);
    Long commitment=(Long)commitments.get(accepted_client);
    long curc=(commitment == null) ? 0 : commitment.longValue();
    long newc=curc + (long)accepted.ttl_sec * 1000 * accepted.size;
    assert newc >= 0;
    commitments.put(accepted_client,new Long(newc));
  }
  Iterator i=commitments.keySet().iterator();
  while (i.hasNext()) {
    Integer client=(Integer)i.next();
    Long commitment=(Long)commitments.get(client);
    Long storage=(Long)storage_by_client.get(client);
    long newc=commitment.longValue() - storage.longValue() * period;
    if (newc < 0)     newc=0;
    assert newc >= 0;
    commitments.put(client,new Long(newc));
  }
}
