private static android.bluetooth.le.ScanSettings toOs(ScanSettings settings){
  return new android.bluetooth.le.ScanSettings.Builder().setReportDelay(settings.getReportDelayMillis()).setScanMode(settings.getScanMode()).build();
}
private static List<android.bluetooth.le.ScanFilter> toOs(List<ScanFilter> filters){
  List<android.bluetooth.le.ScanFilter> osFilters=new ArrayList<android.bluetooth.le.ScanFilter>(filters.size());
  for (  ScanFilter filter : filters) {
    osFilters.add(toOs(filter));
  }
  return osFilters;
}
private static android.bluetooth.le.ScanFilter toOs(ScanFilter filter){
  android.bluetooth.le.ScanFilter.Builder builder=new android.bluetooth.le.ScanFilter.Builder();
  if (!TextUtils.isEmpty(filter.getDeviceAddress())) {
    builder.setDeviceAddress(filter.getDeviceAddress());
  }
  if (!TextUtils.isEmpty(filter.getDeviceName())) {
    builder.setDeviceName(filter.getDeviceName());
  }
  if (filter.getManufacturerId() != -1 && filter.getManufacturerData() != null) {
    if (filter.getManufacturerDataMask() != null) {
      builder.setManufacturerData(filter.getManufacturerId(),filter.getManufacturerData(),filter.getManufacturerDataMask());
    }
 else {
      builder.setManufacturerData(filter.getManufacturerId(),filter.getManufacturerData());
    }
  }
  if (filter.getServiceDataUuid() != null && filter.getServiceData() != null) {
    if (filter.getServiceDataMask() != null) {
      builder.setServiceData(filter.getServiceDataUuid(),filter.getServiceData(),filter.getServiceDataMask());
    }
 else {
      builder.setServiceData(filter.getServiceDataUuid(),filter.getServiceData());
    }
  }
  if (filter.getServiceUuid() != null) {
    if (filter.getServiceUuidMask() != null) {
      builder.setServiceUuid(filter.getServiceUuid(),filter.getServiceUuidMask());
    }
 else {
      builder.setServiceUuid(filter.getServiceUuid());
    }
  }
  return builder.build();
}
private ScanClient toOs(final ScanCallback callback,ScanSettings settings){
  return new ScanClient(callback,settings);
}
