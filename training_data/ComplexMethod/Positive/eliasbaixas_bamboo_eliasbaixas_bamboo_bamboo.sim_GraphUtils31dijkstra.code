/** 
 * Compute the shortest paths from <code>src</code> to <code>dst</code>, or if <code>dst==null</code>, to all nodes in <code>G</code>.
 */
public static final void dijkstra(Node[] G,Node[] pred,long[] dist,Node src,Node dst){
  Set relaxed=new HashSet();
  PriorityQueue Q=new PriorityQueue(G.length);
  for (int i=0; i < G.length; ++i) {
    Node v=G[i];
    if (v.equals(src))     dist[v.number]=0;
 else     dist[v.number]=Long.MAX_VALUE;
    pred[v.number]=null;
  }
  Q.add(src,0);
  while (!Q.isEmpty()) {
    Node u=(Node)Q.removeFirst();
    if (u.equals(dst)) {
      logger.debug(u + "is relaxed");
      return;
    }
    if (!relaxed.contains(u)) {
      logger.debug("relaxing " + u);
      for (Edge e=u.edges; e != null; e=e.next) {
        Node v=e.tail;
        logger.debug(v + " old_dist=" + dist[v.number]+ " new_dist="+ (dist[u.number] + e.len));
        if (dist[v.number] > dist[u.number] + e.len) {
          dist[v.number]=dist[u.number] + e.len;
          pred[v.number]=u;
          Q.add(v,dist[v.number]);
        }
      }
      relaxed.add(u);
    }
  }
}
