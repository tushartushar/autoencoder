public static void main(String[] args) throws Exception {
  if (args.length < 4) {
    System.err.println("usage: <seed> <expansion> <to add> <to remove>");
    System.exit(1);
  }
  md=MessageDigest.getInstance("SHA");
  md.update((byte)0);
  max_hash=md.digest();
  min_hash=new byte[max_hash.length];
  for (int i=0; i < max_hash.length; ++i)   max_hash[i]=-1;
  int seed=Integer.parseInt(args[0]);
  Random rand=new Random(seed);
  int expansion=Integer.parseInt(args[1]);
  max_guid=BigInteger.valueOf(2).pow(160).subtract(BigInteger.ONE);
  MerkleTree tree=new MerkleTree(expansion,md);
  SortedSet keys=new TreeSet();
  System.out.println("Starting tree:");
  draw_tree(tree.root(),keys,"  ");
  int to_add=Integer.parseInt(args[2]);
  for (int i=0; i < to_add; ++i) {
    byte[] data_hash=new byte[20];
    rand.nextBytes(data_hash);
    long time_usec=rand.nextLong() & 0x7fffffffffffffffL;
    while (time_usec >= tree.root().range_high())     time_usec>>=1;
    StorageManager.Key k=new StorageManager.Key(time_usec,0,GuidTools.random_guid(rand),new byte[20],data_hash,rand.nextInt(2) > 0,StorageManager.ZERO_CLIENT);
    System.out.println("adding key[" + i + "]="+ k);
    keys.add(k);
    tree.root().invalidate_path(k.time_usec);
    fill_holes(tree,keys);
    System.out.println("After add " + k);
    draw_tree(tree.root(),keys,"  ");
  }
  int to_remove=Integer.parseInt(args[3]);
  for (int i=0; i < to_remove; ++i) {
    int which=rand.nextInt(keys.size());
    StorageManager.Key k=null;
    Iterator j=keys.iterator();
    while (which-- >= 0)     k=(StorageManager.Key)j.next();
    System.out.println("removing key[" + i + "]="+ k);
    j.remove();
    tree.root().invalidate_path(k.time_usec);
    fill_holes(tree,keys);
    System.out.println("After remove " + k);
    draw_tree(tree.root(),keys,"  ");
  }
  System.out.println("Final tree:");
  draw_tree(tree.root(),keys,"  ");
}
