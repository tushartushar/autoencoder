public void call(Object user_data){
  QueueElementIF item=(QueueElementIF)user_data;
  if (logger.isDebugEnabled())   logger.debug("dispatching " + item);
  try {
    classifier.dispatch(item);
  }
 catch (  SinkFullException e) {
    System.err.println("could not dispatch later " + item);
    e.printStackTrace(System.err);
  }
}
public void call(Object notUsed){
  LinkedList<String> stagenames=new LinkedList<String>();
  Enumeration allStages=mgr.getConfig().getStages();
  while (allStages.hasMoreElements()) {
    stageDescr descr=(stageDescr)allStages.nextElement();
    stagenames.add(descr.stageName);
  }
  for (  String stageName : stagenames) {
    try {
      mgr.destroyStage(stageName);
    }
 catch (    Exception e) {
      logger.warn("Got exception " + e + " when trying to destroy stage "+ stageName);
    }
  }
  Classifier.removeClassifier(node_id);
}
public void call(Object user_data){
  logger.info("loading " + next_node_id + " from "+ next_cfg_filename+ ".  Start time is "+ next_start_time_us+ " and stop time is "+ next_stop_time_us+ ".");
  int next_graph_index=node_id_to_graph_index(next_node_id);
  NodeCleanupCb cleanup_cb=new NodeCleanupCb(next_node_id);
  event_queue.add_node(next_node_id,next_stop_time_us - next_start_time_us,cleanup_cb,null);
  Classifier classifier=Classifier.getClassifier(next_node_id);
  classifier.set_timer_cb(new MyClassifierTimerCB(classifier,next_node_id));
  SandstormConfig cfg=null;
  try {
    FileReader reader=new FileReader(next_cfg_filename);
    cfg=new SandstormConfig(reader);
    reader.close();
  }
 catch (  IOException e) {
    System.err.println("Error with config file " + next_cfg_filename);
    System.err.println("Caught exception " + e + " during parse");
    e.printStackTrace(System.err);
    System.exit(1);
  }
  StageManager mgr=new StageManager(cfg);
  cleanup_cb.mgr=mgr;
{
    Hashtable initargs=new Hashtable();
    initargs.put("node_id",next_node_id.toString());
    initargs.put("simulator_running","true");
    ConfigData config_data=new ConfigData(mgr,initargs);
    EventHandlerIF network=null;
    try {
      network=new Network(next_node_id,acore);
    }
 catch (    IOException e) {
      logger.fatal("IOException initializing network " + e);
      System.exit(1);
    }
    SinkIF sink=new SimulatorSink(network);
    StageIF stage=new SimulatorStage("Network",new StageWrapper(network),sink);
    config_data.setStage(stage);
    try {
      event_queue.set_current_node_id(next_node_id);
      network.init(config_data);
      event_queue.set_current_node_id(null);
    }
 catch (    Exception e) {
      System.err.println("Error with node " + next_node_id + ".");
      System.err.println("Caught exception " + e + " during init.");
      e.printStackTrace(System.err);
      System.exit(1);
    }
    mgr.addStage(stage.getName(),stage);
  }
  LinkedList handlers=new LinkedList();
  Enumeration iter=cfg.getStages();
  while (iter.hasMoreElements()) {
    stageDescr descr=(stageDescr)iter.nextElement();
    if (descr.stageName.indexOf("Network") != -1)     continue;
    descr.initargs.put("simulator_running","true");
    ConfigData config_data=new ConfigData(mgr,descr.initargs);
    Class c=null;
    try {
      c=Class.forName(descr.className);
    }
 catch (    ClassNotFoundException e) {
      System.err.println("Error: could not load class " + descr.className + ".");
      System.exit(1);
    }
    EventHandlerIF handler=null;
    try {
      handler=(EventHandlerIF)c.newInstance();
    }
 catch (    Exception e) {
      System.err.println("Error: caught exception " + e + " while trying to instantiate "+ "an object of type "+ descr.className+ ".  Stack trace follows:");
      e.printStackTrace(System.err);
      System.exit(1);
    }
    SinkIF sink=new SimulatorSink(handler);
    StageIF stage=new SimulatorStage(descr.stageName,new StageWrapper(handler),sink);
    config_data.setStage(stage);
    mgr.addStage(descr.stageName,stage);
    Object[] p={handler,config_data};
    handlers.addLast(p);
  }
  while (!handlers.isEmpty()) {
    Object[] p=(Object[])handlers.removeFirst();
    EventHandlerIF handler=(EventHandlerIF)p[0];
    ConfigData config_data=(ConfigData)p[1];
    try {
      event_queue.set_current_node_id(next_node_id);
      handler.init(config_data);
      event_queue.set_current_node_id(null);
    }
 catch (    Exception e) {
      System.err.println("Error: caught an exception " + e + " while trying to initialize the stage "+ handler+ " Stack trace follows:");
      e.printStackTrace(System.err);
      System.exit(1);
    }
  }
  try {
    event_queue.set_current_node_id(next_node_id);
    classifier.enqueue(new StagesInitializedSignal());
    event_queue.set_current_node_id(null);
  }
 catch (  SinkException e) {
    System.err.println("got exception on init: " + e);
    e.printStackTrace(System.err);
    System.exit(1);
  }
  load_next_node();
}
